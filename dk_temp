USE [DK_DB_APPS]
GO
/*

set     statistics time, io on

exec    #tmp_DK_SP_BSTX_INSERT_TRADES
*/
-- EXEC dbo.DK_SP_BSTX_INSERT_TRADES '2010-07-14 00:00:00.000', '2011-12-14 00:00:00.000'    
CREATE  OR ALTER PROCEDURE #tmp_DK_SP_BSTX_INSERT_TRADES --'2017-03-28 00:00:00.000', '2017-03-28 00:00:00.000'    
	(
	@TradeDateFrom DATETIME = NULL,
	@TradeDateTo DATETIME = NULL
	)
AS

set     nocount on

--declare	@TradeDateFrom DATETIME = NULL,
--	@TradeDateTo DATETIME = NULL

/******************************************************************************************
**
******************************************************************************************/

	IF @TradeDateFrom IS NULL
	BEGIN
		SELECT @TradeDateFrom = MIN(CONVERT(DATETIME, TRADE_DATE))
		FROM DK_DB_TRADE.dbo.DKG_TBL_CRD_LOAD_TRADE_STAGING
	END

	IF @TradeDateTo IS NULL
	BEGIN
		SELECT @TradeDateTo = MAX(CONVERT(DATETIME, TRADE_DATE))
		FROM DK_DB_TRADE.dbo.DKG_TBL_CRD_LOAD_TRADE_STAGING
	END
/******************************************************************************************
**
******************************************************************************************/

	IF OBJECT_ID('tempdb..#tmpCRDTrades') IS NOT NULL
		DROP TABLE #tmpCRDTrades

	IF OBJECT_ID('tempdb..#tmpTrades') IS NOT NULL
		DROP TABLE #tmpTrades

	IF OBJECT_ID('tempdb..#tmpPrevCRDPrices') IS NOT NULL
		DROP TABLE #tmpPrevCRDPrices

	IF OBJECT_ID('tempdb..#tmpNextCRDPrices') IS NOT NULL
		DROP TABLE #tmpNextCRDPrices

	IF OBJECT_ID('tempdb..#distincttmpPrevCRDPrices') IS NOT NULL
		DROP TABLE #distincttmpPrevCRDPrices

	IF OBJECT_ID('tempdb..#distincttmpNextCRDPrices') IS NOT NULL
		DROP TABLE #distincttmpNextCRDPrices
/******************************************************************************************
**
******************************************************************************************/

	CREATE TABLE #distincttmpPrevCRDPrices (
		PrevPrice FLOAT,
		PrevTimeStamp DATETIME
		)

	CREATE TABLE #distincttmpNextCRDPrices (
		NextPrice FLOAT,
		NextTimeStamp DATETIME
		)

	CREATE TABLE #tmpPrevCRDPrices (
		auto_incr INT,
		PrevPrice FLOAT,
		PrevTimeStamp DATETIME
		)

	CREATE TABLE #tmpNextCRDPrices (
		auto_incr INT,
		NextPrice FLOAT,
		NextTimeStamp DATETIME
		)

	CREATE TABLE #tmpCRDTrades (
		ExtSecId INT,
		TradeId BIGINT,
		OrderId BIGINT,
		TradeDate DATETIME,
		LastFill DATETIME,
		TxnType VARCHAR(20),
		Manager VARCHAR(50),
		Broker VARCHAR(20),
		Price NUMERIC(20, 8),
		Quantity NUMERIC(20, 8),
		SettleCurr VARCHAR(50),
		STATUS VARCHAR(255)
		)
/******************************************************************************************
**
******************************************************************************************/

	INSERT INTO #tmpCRDTrades
	SELECT CONVERT(INT, EXT_SEC_ID),
		CONVERT(BIGINT, TRADE_ID),
		CONVERT(BIGINT, ORDER_ID),
		CONVERT(DATETIME, TRADE_DATE),
		CONVERT(DATETIME, LAST_FILL),
		CONVERT(VARCHAR(20), ORDTR),
		CONVERT(VARCHAR(50), STRATEGY_CD_1),
		CONVERT(VARCHAR(20), BROKER),
		CONVERT(NUMERIC(20, 8), EXEC_PRICE),
		CONVERT(NUMERIC(20, 8), EXEC_QTY),
		CONVERT(VARCHAR(50), PRIN_SETTLE_CRR),
		CONVERT(VARCHAR(255), STATUS)
	FROM DK_DB_TRADE.dbo.DKG_TBL_CRD_LOAD_TRADE_STAGING
	WHERE CONVERT(DATETIME, TRADE_DATE) BETWEEN @TradeDateFrom
			AND @TradeDateTo
		AND STATUS IN (
			'ACCT',
			'CNCLACCT'
			)
	
	UNION
	
	SELECT CONVERT(INT, EXT_SEC_ID),
		CONVERT(BIGINT, TRADE_ID),
		CONVERT(BIGINT, ORDER_ID),
		CONVERT(DATETIME, TRADE_DATE),
		CONVERT(DATETIME, LAST_FILL),
		CONVERT(VARCHAR(20), ORDTR),
		CONVERT(VARCHAR(50), STRATEGY_CD_1),
		CONVERT(VARCHAR(20), BROKER),
		CONVERT(NUMERIC(20, 8), EXEC_PRICE),
		CONVERT(NUMERIC(20, 8), EXEC_QTY),
		CONVERT(VARCHAR(50), PRIN_SETTLE_CRR),
		CONVERT(VARCHAR(255), STATUS)
	FROM DK_DB_TRADE.dbo.DKG_TBL_CRD_LOAD_TRADE_STAGING_HISTORY
	WHERE CONVERT(DATETIME, TRADE_DATE) BETWEEN @TradeDateFrom
			AND @TradeDateTo
		AND STATUS IN (
			'ACCT',
			'CNCLACCT'
			)
/******************************************************************************************
**
******************************************************************************************/

	SELECT S.DK_TS_NAME AS Symbol,
		S.DK_TS_DESC AS Name,
		S.DK_TST_NAME AS SecType,
		T.TradeId,
		T.OrderId,
		T.TradeDate,
		CASE 
			WHEN T.Manager IN (
					'MGR_09',
					'MGR_15',
					'MGR_23',
					'MGR_24',
					'MGR_26'
					)
				THEN dbo.GET_TZTIME(T.LastFill, 'ET')
			ELSE T.LastFill
			END AS LastFill,
		CASE T.TxnType
			WHEN 'BUYL'
				THEN 'Buy'
			WHEN 'SELLL'
				THEN 'Sell'
			WHEN 'BUYS'
				THEN 'Buy Cover'
			WHEN 'SELLS'
				THEN 'Sell Short'
			ELSE T.TxnType
			END AS TxnType,
		T.Manager,
		T.Broker,
		T.Quantity,
		T.Price,
		T.SettleCurr,
		T.STATUS
	INTO #tmpTrades
	FROM DK_DB_SECMASTER.dbo.DK_VW_FLATVIEW S
	JOIN #tmpCRDTrades T ON S.DK_TS_ID = T.ExtSecId
	WHERE S.DK_TST_NAME IN (
			'Common stock',
			'Master Limited Partnership',
			'ADR',
			'Warrants',
			'Rights', --'Exchange-traded equity option',    
			'Convertible bond',
			'Convertible Bond - French Style',
			'Preferred stock',
			'Convertible preferred stock',
			--'Equity index',    
			'Exchange-traded fund'
			)

  /*
 INSERT INTO DK_DB_APPS.dbo.DK_TBL_BSTX_DATA    
 (  DK_TBD_ORDER_ID,  DK_TBD_TRADE_ID,  DK_TBD_SYMBOL,  DK_TBD_NAME,  DK_TBD_SEC_TYPE,  DK_TBD_TRADE_DATE,    
  DK_TBD_LAST_FILL,  DK_TBD_TXN_TYPE,  DK_TBD_MANAGER,  DK_TBD_BROKER,  DK_TBD_QUANTITY,  DK_TBD_PRICE,    
  DK_TBD_SETTLE_CURR,  DK_TBD_CREATE_USER,  DK_TBD_CREATE_DATETIME, DK_TBD_STATUS )    
  */

 SELECT OrderId,  TradeId,  Symbol,  Name,  SecType,  TradeDate,  MAX(LastFill) AS LastFill,    
   TxnType,  Manager,  Broker, SUM(Quantity) AS Quantity,  SUM(Quantity * Price) / SUM(Quantity) AS Price,    
   SettleCurr,  'SYSTEM' as DK_TBD_CREATE_USER,   GETDATE() as DK_TBD_CREATE_DATETIME, Status  
into    #tmp_DK_TBL_BSTX_DATA
 FROM #tmpTrades 
 WHERE OrderId NOT IN (SELECT DK_TBD_ORDER_ID FROM [DK_DB_APPS].[dbo].[DK_TBL_BSTX_DATA]
						WHERE DK_TBD_ORDER_ID = OrderId AND DK_TBD_TRADE_ID = TradeId AND CAST(DK_TBD_TRADE_DATE AS DATETIME) = CAST(TradeDate AS DATETIME)  --- #Changed Need to check
						AND DK_TBD_SYMBOL = Symbol AND DK_TBD_TXN_TYPE = TxnType AND DK_TBD_MANAGER = Manager 
						AND DK_TBD_BROKER = Broker AND DK_TBD_STATUS = Status   )   
 GROUP BY OrderId,  TradeId,  Symbol,  Name,  SecType,  TradeDate,  TxnType,  Manager,  Broker,  SettleCurr , Status   
/******************************************************************************************
**
******************************************************************************************/

	DECLARE @reccount INT
	DECLARE @Counter INT
	DECLARE @CRDTimeStamp DATETIME
	DECLARE @Symbol VARCHAR(255)
	DECLARE @TradeID INT
	DECLARE @MaxCount INT
	DECLARE @MinCount INT

	SET @Counter = 1

	--Loop through the BSTX_DATA records and get the prices for each Trade    
	SELECT @MaxCount = MAX(DK_TBD_ID),
		@MinCount = MIN(DK_TBD_ID)
	FROM [DK_DB_APPS].dbo.DK_TBL_BSTX_DATA
	WHERE DK_TBD_TRADE_DATE BETWEEN @TradeDateFrom
			AND @TradeDateTo



/******************************************************************************************
**
******************************************************************************************/
        drop    table if exists #tmp_a
        drop    table if exists #tmp_b
        drop    table if exists #tmp_c

        drop    table if exists #tmp_rewrite_asc
        drop    table if exists #tmp_rn_asc
        drop    table if exists #tmp_rewrite_desc
        drop    table if exists #tmp_rn_desc



        --declare	@TradeDateFromL datetime        = '2020-03-27 00:00:00.000'     ,
	       -- @TradeDateToL   datetime        = '2020-03-31 00:00:00.000'     --,
                --,
                --@minCount       bigint          = '1128576'                     ,
                --@maxCount       bigint          = '1130214'

        --select  @tradeDateFromL = @tradeDateFrom,
        --        @tradeDateToL = @tradeDateTo
                

        -----------------------------------------------------------------------------------------
        select  a.dk_tbd_id, a.dk_tbd_trade_date, a.dk_tbd_symbol, a.dk_tbd_last_fill
        into    #tmp_a
        from    [dk_db_apps].dbo.dk_tbl_bstx_data a(nolock)
        where   a.dk_tbd_id between @mincount and @maxcount
                and a.dk_tbd_trade_date between @tradedatefrom and @tradedateto

        -----------------------------------------------------------------------------------------
        select  b.DK_VGF_GENEVA_SEC_ID, b.dk_vgf_ts_name
        into    #tmp_b
        from    dk_db_secmaster.dbo.dk_vw_geneva_flatview b(nolock)
        where   exists(select 1 from #tmp_a a where a.dk_tbd_symbol = b.dk_vgf_ts_name)

        -----------------------------------------------------------------------------------------
        
        select  c.DK_TIPH_PRICE_USED, c.DK_TIPH_UPD_DATE, c.dk_tiph_investment_code
        into    #tmp_c
        from    [dk_db_marketdata].dbo.dk_tbl_intraday_price_history c with(nolock,forceseek)--, forceseek)
        where   exists(select 1 from #tmp_b b where b.dk_vgf_geneva_sec_id = c.dk_tiph_investment_code)
                and c.dk_tiph_upd_date between @TradeDateFrom and @TradeDateTo
        --        and c.dk_tiph_upd_date between '2020-03-27 00:00:00.000' and '2020-03-31 00:00:00.000'
        --option  (recompile)

        --select  *
        --from    #tmp_c

        create  clustered index #ix#tmp_c on #tmp_c(dk_tiph_investment_code)

        -----------------------------------------------------------------------------------------
        select  a.dk_tbd_id             ,
                c.dk_tiph_price_used    ,
                c.dk_tiph_upd_date
        into    #tmp_rewrite_asc
        from    #tmp_a a
                inner join #tmp_b b on a.dk_tbd_symbol = b.dk_vgf_ts_name
                inner join #tmp_c c(nolock) on b.dk_vgf_geneva_sec_id = c.dk_tiph_investment_code
        where   dk_tbd_trade_date between @tradedatefrom and @tradedateto
	        and dk_tiph_upd_date > dk_tbd_last_fill
	        and cast(dk_tiph_upd_date as date) = cast(dk_tbd_trade_date as date) --- #changed need to check
                and a.dk_tbd_id between @mincount and @maxcount

        -----------------------------------------------------------------------------------------
        select  a.dk_tbd_id             ,
                c.dk_tiph_price_used    ,
                c.dk_tiph_upd_date
        into    #tmp_rewrite_desc
        from    #tmp_a a
                inner join #tmp_b b on a.dk_tbd_symbol = b.dk_vgf_ts_name
                inner join #tmp_c c(nolock) on b.dk_vgf_geneva_sec_id = c.dk_tiph_investment_code
        where   dk_tbd_trade_date between @tradedatefrom and @tradedateto
	        and dk_tiph_upd_date < dk_tbd_last_fill
	        and cast(dk_tiph_upd_date as date) = cast(dk_tbd_trade_date as date) --- #changed need to check
                and a.dk_tbd_id between @mincount and @maxcount
        group   by dk_tbd_id, dk_tiph_price_used, dk_tiph_upd_date

        -----------------------------------------------------------------------------------------
        --hopped to a second temp table as having this in the previous was causing spill to disk in tempdb
        select  dk_tbd_id                                                                               ,
                dk_tiph_price_used                                                                      ,
                dk_tiph_upd_date                                                                        ,
                row_number() over(partition by dk_tbd_id order by dk_tiph_upd_date asc)     as rn_asc
        into    #tmp_rn_asc
        from    #tmp_rewrite_asc
        group   by dk_tbd_id, dk_tiph_price_used, dk_tiph_upd_date


        -----------------------------------------------------------------------------------------
        --hopped to a second temp table as having this in the previous was causing spill to disk in tempdb
        select  dk_tbd_id                                                                               ,
                dk_tiph_price_used                                                                      ,
                dk_tiph_upd_date                                                                        ,
                row_number() over(partition by dk_tbd_id order by dk_tiph_upd_date desc)    as rn_desc
        into    #tmp_rn_desc
        from    #tmp_rewrite_desc
        group   by dk_tbd_id, dk_tiph_price_used, dk_tiph_upd_date

        create  clustered index #ix#tmp_rn_asc  on #tmp_rn_asc(dk_tbd_id)
        create  clustered index #ix#tmp_rn_desc on #tmp_rn_desc(dk_tbd_id)


/******************************************************************************************
**
******************************************************************************************/
        select  d.dk_tbd_id,
                d.dk_tbd_previous_price1,/*=*/ d1.DK_TIPH_PRICE_USED as 'prevprice01',
                d.dk_tbd_previous_price2,/*=*/ d2.DK_TIPH_PRICE_USED as 'prevprice02',
                d.dk_tbd_previous_price3,/*=*/ d3.DK_TIPH_PRICE_USED as 'prevprice03',
                d.dk_tbd_previous_price4,/*=*/ d4.DK_TIPH_PRICE_USED as 'prevprice04',
                d.dk_tbd_previous_price5,/*=*/ d5.DK_TIPH_PRICE_USED as 'prevprice05',
                d.dk_tbd_next_price1,/*=*/ a1.DK_TIPH_PRICE_USED as 'nextprice01',
                d.dk_tbd_next_price2,/*=*/ a2.DK_TIPH_PRICE_USED as 'nextprice02',
                d.dk_tbd_next_price3,/*=*/ a3.DK_TIPH_PRICE_USED as 'nextprice03',
                d.dk_tbd_next_price4,/*=*/ a4.DK_TIPH_PRICE_USED as 'nextprice04',
                d.dk_tbd_next_price5,/*=*/ a5.DK_TIPH_PRICE_USED as 'nextprice05',
                d.dk_tbd_previous_timestamp1,/*=*/ d1.DK_TIPH_UPD_DATE as 'prev_timestamp01',
                d.dk_tbd_previous_timestamp2,/*=*/ d2.DK_TIPH_UPD_DATE as 'prev_timestamp02',
                d.dk_tbd_previous_timestamp3,/*=*/ d3.DK_TIPH_UPD_DATE as 'prev_timestamp03',
                d.dk_tbd_previous_timestamp4,/*=*/ d4.DK_TIPH_UPD_DATE as 'prev_timestamp04',
                d.dk_tbd_previous_timestamp5,/*=*/ d5.DK_TIPH_UPD_DATE as 'prev_timestamp05',
                d.dk_tbd_next_timestamp1,/*=*/ a1.DK_TIPH_UPD_DATE as 'next_timestamp01',
                d.dk_tbd_next_timestamp2,/*=*/ a2.DK_TIPH_UPD_DATE as 'next_timestamp02',
                d.dk_tbd_next_timestamp3,/*=*/ a3.DK_TIPH_UPD_DATE as 'next_timestamp03',
                d.dk_tbd_next_timestamp4,/*=*/ a4.DK_TIPH_UPD_DATE as 'next_timestamp04',
                d.dk_tbd_next_timestamp5,/*=*/ a5.DK_TIPH_UPD_DATE as 'next_timestamp05'
        from    dk_tbl_bstx_data d
                ------------------------
                left join #tmp_rn_asc   a1 on a1.dk_tbd_id = d.dk_tbd_id and a1.rn_asc = 1
                left join #tmp_rn_asc   a2 on a2.dk_tbd_id = d.dk_tbd_id and a2.rn_asc = 2
                left join #tmp_rn_asc   a3 on a3.dk_tbd_id = d.dk_tbd_id and a3.rn_asc = 3
                left join #tmp_rn_asc   a4 on a4.dk_tbd_id = d.dk_tbd_id and a4.rn_asc = 4
                left join #tmp_rn_asc   a5 on a5.dk_tbd_id = d.dk_tbd_id and a5.rn_asc = 5
                ------------------------
                left join #tmp_rn_desc  d1 on d1.dk_tbd_id = d.dk_tbd_id and d1.rn_desc = 1
                left join #tmp_rn_desc  d2 on d2.dk_tbd_id = d.dk_tbd_id and d2.rn_desc = 2
                left join #tmp_rn_desc  d3 on d3.dk_tbd_id = d.dk_tbd_id and d3.rn_desc = 3
                left join #tmp_rn_desc  d4 on d4.dk_tbd_id = d.dk_tbd_id and d4.rn_desc = 4
                left join #tmp_rn_desc  d5 on d5.dk_tbd_id = d.dk_tbd_id and d5.rn_desc = 5
        where   /*d.dk_tbd_id = 1128897
                and*/ exists(select 1 from #tmp_a a where a.dk_tbd_id = d.dk_tbd_id)

 --               return
	--WHILE (@MinCount <= @MaxCount)
	--BEGIN
	--	INSERT INTO #distincttmpPrevCRDPrices
	--	SELECT DISTINCT TOP 5 DK_TIPH_PRICE_USED,
	--		DK_TIPH_UPD_DATE
	--	FROM [DK_DB_APPS].dbo.DK_TBL_BSTX_DATA A(NOLOCK)
	--	JOIN DK_DB_SECMASTER.dbo.DK_VW_GENEVA_FLATVIEW B(NOLOCK) ON A.DK_TBD_SYMBOL = B.DK_VGF_TS_NAME
	--	JOIN [DK_DB_MARKETDATA].dbo.DK_TBL_INTRADAY_PRICE_HISTORY C(NOLOCK) ON B.DK_VGF_GENEVA_SEC_ID = C.DK_TIPH_INVESTMENT_CODE
	--	WHERE DK_TBD_TRADE_DATE BETWEEN @TradeDateFrom
	--			AND @TradeDateTo
	--		AND DK_TIPH_UPD_DATE < DK_TBD_LAST_FILL
	--		AND CAST(DK_TIPH_UPD_DATE AS DATE) = CAST(DK_TBD_TRADE_DATE AS DATE) --- #Changed Need to check
	--		AND DK_TBD_ID = @MinCount
	--	ORDER BY DK_TIPH_UPD_DATE DESC

	--	INSERT INTO #distincttmpNextCRDPrices
	--	SELECT DISTINCT TOP 5 DK_TIPH_PRICE_USED,
	--		DK_TIPH_UPD_DATE
	--	FROM [DK_DB_APPS].dbo.DK_TBL_BSTX_DATA A(NOLOCK)
	--	JOIN [DK_DB_SECMASTER].dbo.DK_VW_GENEVA_FLATVIEW B(NOLOCK) ON A.DK_TBD_SYMBOL = B.DK_VGF_TS_NAME
	--	JOIN [DK_DB_MARKETDATA].dbo.DK_TBL_INTRADAY_PRICE_HISTORY C(NOLOCK) ON B.DK_VGF_GENEVA_SEC_ID = C.DK_TIPH_INVESTMENT_CODE
	--	WHERE DK_TBD_TRADE_DATE BETWEEN @TradeDateFrom
	--			AND @TradeDateTo
	--		AND DK_TIPH_UPD_DATE > DK_TBD_LAST_FILL
	--		AND CAST(DK_TIPH_UPD_DATE AS DATE) = CAST(DK_TBD_TRADE_DATE AS DATE) --- #Changed Need to check
	--		AND DK_TBD_ID = @MinCount
	--	ORDER BY DK_TIPH_UPD_DATE ASC

	--	INSERT INTO #tmpPrevCRDPrices
	--	SELECT ROW_NUMBER() OVER (
	--			ORDER BY PrevTimeStamp DESC
	--			) AS id,
	--		PrevPrice,
	--		PrevTimeStamp
	--	FROM #distincttmpPrevCRDPrices

	--	INSERT INTO #tmpNextCRDPrices
	--	SELECT ROW_NUMBER() OVER (
	--			ORDER BY NextTimeStamp ASC
	--			) AS id,
	--		NextPrice,
	--		NextTimeStamp
	--	FROM #distincttmpNextCRDPrices

	--	/*
 -- UPDATE DK_TBL_BSTX_DATA   
 -- SET  DK_TBD_PREVIOUS_PRICE1=(SELECT PrevPrice FROM #tmpPrevCRDPrices WHERE auto_incr=1),    
 --   DK_TBD_PREVIOUS_PRICE2=(SELECT PrevPrice FROM #tmpPrevCRDPrices WHERE auto_incr=2),    
 --   DK_TBD_PREVIOUS_PRICE3=(SELECT PrevPrice FROM #tmpPrevCRDPrices WHERE auto_incr=3),    
 --   DK_TBD_PREVIOUS_PRICE4=(SELECT PrevPrice FROM #tmpPrevCRDPrices WHERE auto_incr=4),    
 --   DK_TBD_PREVIOUS_PRICE5=(SELECT PrevPrice FROM #tmpPrevCRDPrices WHERE auto_incr=5),    
 --   DK_TBD_NEXT_PRICE1=(SELECT NextPrice FROM #tmpNextCRDPrices WHERE auto_incr=1),    
 --   DK_TBD_NEXT_PRICE2=(SELECT NextPrice FROM #tmpNextCRDPrices WHERE auto_incr=2),    
 --   DK_TBD_NEXT_PRICE3=(SELECT NextPrice FROM #tmpNextCRDPrices WHERE auto_incr=3),    
 --   DK_TBD_NEXT_PRICE4=(SELECT NextPrice FROM #tmpNextCRDPrices WHERE auto_incr=4),    
 --   DK_TBD_NEXT_PRICE5=(SELECT NextPrice FROM #tmpNextCRDPrices WHERE auto_incr=5),    
 --   DK_TBD_PREVIOUS_TIMESTAMP1=(SELECT PrevTimestamp FROM #tmpPrevCRDPrices WHERE auto_incr=1),    
 --   DK_TBD_PREVIOUS_TIMESTAMP2=(SELECT PrevTimestamp FROM #tmpPrevCRDPrices WHERE auto_incr=2),    
 --   DK_TBD_PREVIOUS_TIMESTAMP3=(SELECT PrevTimestamp FROM #tmpPrevCRDPrices WHERE auto_incr=3),    
 --   DK_TBD_PREVIOUS_TIMESTAMP4=(SELECT PrevTimestamp FROM #tmpPrevCRDPrices WHERE auto_incr=4),    
 --   DK_TBD_PREVIOUS_TIMESTAMP5=(SELECT PrevTimestamp FROM #tmpPrevCRDPrices WHERE auto_incr=5),    
 --   DK_TBD_NEXT_TIMESTAMP1=(SELECT NextTimestamp FROM #tmpNextCRDPrices WHERE auto_incr=1),    
 --   DK_TBD_NEXT_TIMESTAMP2=(SELECT NextTimestamp FROM #tmpNextCRDPrices WHERE auto_incr=2),    
 --   DK_TBD_NEXT_TIMESTAMP3=(SELECT NextTimestamp FROM #tmpNextCRDPrices WHERE auto_incr=3),    
 --   DK_TBD_NEXT_TIMESTAMP4=(SELECT NextTimestamp FROM #tmpNextCRDPrices WHERE auto_incr=4),    
 --   DK_TBD_NEXT_TIMESTAMP5=(SELECT NextTimestamp FROM #tmpNextCRDPrices WHERE auto_incr=5)        
 -- WHERE DK_TBD_ID=@MinCount    
 -- */
	--	TRUNCATE TABLE #distincttmpPrevCRDPrices

	--	TRUNCATE TABLE #distincttmpNextCRDPrices

	--	TRUNCATE TABLE #tmpPrevCRDPrices

	--	TRUNCATE TABLE #tmpNextCRDPrices

	--	SET @MinCount = @MinCount + 1
	--END

	DROP TABLE #tmpCRDTrades

	DROP TABLE #tmpTrades

	DROP TABLE #tmpPrevCRDPrices

	DROP TABLE #tmpNextCRDPrices

	DROP TABLE #distincttmpPrevCRDPrices

	DROP TABLE #distincttmpNextCRDPrices
--END
