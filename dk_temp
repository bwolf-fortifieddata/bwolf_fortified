RAISERROR('	CREATING OR ALTERING PROCEDURE [Monitoring].[usp_CollectDeadlocks]',10,1) WITH NOWAIT;
if object_id('Monitoring.usp_CollectDeadlocks') is null exec('create procedure [Monitoring].[usp_CollectDeadlocks] as select getdate() DT')
GO
  alter procedure Monitoring.usp_CollectDeadlocks
	@OPS_ID smallint
WITH ENCRYPTION
as
set transaction isolation level read uncommitted
set nocount on
declare @XETargetFile nvarchar(max),
		@LastFileName varchar(1000),
		@LastOffset bigint,
		@OPL_ID int,
		@ErrorMessage nvarchar(4000),
		@RowCount bigint,
		@AttemptCount tinyint = 0,
		@Success bit = 0

if not exists (select * from Licensing.fn_ValidateLicense()) return

if object_id('tempdb..#Deadlocks') is not null
	drop table #Deadlocks

select @LastFileName = cast(Info1 as varchar(1000)),
	@LastOffset = cast(Info2 as bigint)
from OpsControl.fn_GetLastLogRecord(@OPS_ID, default, default, 1, default, default)

exec OpsControl.usp_LogOperation @OPL_ID = @OPL_ID output,
									@OPS_ID = @OPS_ID

select @XETargetFile = x.value('(EventFileTarget/File/@name)[1]', 'varchar(1000)')
from sys.dm_xe_session_targets t
	inner join sys.dm_xe_sessions s on t.event_session_address = s.address
	cross apply (select CAST(target_data as xml) x) e
where s.name = 'system_health'
	and target_name = 'event_file'

if @XETargetFile like '%system_health%.xel'
begin
	select @XETargetFile = left(@XETargetFile, len(@XETargetFile) - charindex('\', reverse(@XETargetFile), 1)) + '\system_health*.xel'

	while @AttemptCount < 2
			and @Success = 0
	begin
		set @AttemptCount += 1
		begin try
			select [file_name] FName, file_offset Offset,
				dateadd(hour, -DATEDIFF(hour, getdate(), getutcdate()), ed.value('(event/@timestamp)[1]', 'datetime')) EventDate,
				cast(b.query('.') as nvarchar(max)) DeadLockGraph
			into #Deadlocks
			from sys.fn_xe_file_target_read_file(@XETargetFile, null, @LastFileName, @LastOffset) e
				cross apply (select cast(event_data as xml) ed) x
				cross apply ed.nodes('event/data/value/deadlock') a(b)

			select top 1 @LastFileName = FName, @LastOffset = Offset
			from #Deadlocks
			order by EventDate desc

			begin transaction
			insert into Monitoring.Deadlocks(DLK_DateTime, DLK_Graph)
			select EventDate, DeadLockGraph
			from #Deadlocks
			where EventDate > (select max(DLK_DateTime)
								from Monitoring.Deadlocks)
				or @AttemptCount = 1
			set @RowCount = @@ROWCOUNT

			exec OpsControl.usp_LogOperation @OPL_ID = @OPL_ID,
												@Info1 = @LastFileName,
												@Info2 = @LastOffset,
												@Info3 = @RowCount,
												@Finalize = 1

			commit transaction

			set @Success = 1
		end try
		begin catch
			if @@TRANCOUNT > 0
				rollback transaction
			set @ErrorMessage = ERROR_MESSAGE()

			if @ErrorMessage like 'The offset % is invalid for log file "%".%'
					and @AttemptCount < 2
			begin
				select @LastFileName = null,
					@LastOffset = null,
					@ErrorMessage = null

				drop table #Deadlocks
			end
			else
				exec OpsControl.usp_LogOperation @OPL_ID = @OPL_ID,
													@ErrorMessage = @ErrorMessage,
													@Finalize = 1
		end catch
	end
end
else
	exec OpsControl.usp_LogOperation @OPL_ID = @OPL_ID,
									@ErrorMessage = 'No system_health file target found',
									@Finalize = 1

GO
