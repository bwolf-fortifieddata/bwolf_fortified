USE DK_DB_PNL_MONITOR
GO
/****** Object:  StoredProcedure dbo.DKG_SP_SELECT_INVESTMENT_PRICES_NEW    Script Date: 4/29/2020 10:08:21 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
set     statistics time, io on
go
exec    DKG_SP_SELECT_INVESTMENT_PRICES_NEW

exec    #tmp_DKG_SP_SELECT_INVESTMENT_PRICES_NEW
*/
GO
/**********************************************************************************        
Created By   : Manish Kumar        
Created Date  : 12/08/2009        
Project   : PRICING APPLICATION        
Description   : RETURNS INVESTMENT PRICES FROM GENEVA PRICING TABLES  
Modified By 	: Desh Deepak Sharma
Modify Date 	: 09/31/2013
Description  	: GHSC and GHSI fund related changes (PCL-207)       
Modified By 	: Anshuman G
Modify Date 	: 12/18/2013
Description  	: GHSC and GHSI fund related changes (APPSUPP-11991)    

revision history: 
2020-04-29      Wolf(FortifiedData)
        * procedure was top consumer for CPU on prod instance
        * over 7000 CPU milliseconds per call at 44 calls per hour



**********************************************************************************/        
        
create  or ALTER PROCEDURE #tmp_DKG_SP_SELECT_INVESTMENT_PRICES_NEW
	@P_UUID INT = 0
AS        
BEGIN   


        --declare @P_UUID INT = 0


        drop    table if exists #Prices
        drop    table if exists #PriceSource
        drop    table if exists #Entitlements
        drop    table if exists #tmp_Other_Prices

     
	-- SET NOCOUNT ON added to prevent extra result sets from        
	-- interfering with SELECT statements.        
	SET NOCOUNT ON;          
         
	CREATE TABLE #PriceSource        
	(        
		InvestmentID INT,        
		InvestmentCode VARCHAR(255),        
		SourceID INT,  
		Par100 BIT       
	)        
         
	CREATE TABLE #Prices        
	(        
		InvestmentID INT,        
		InvestmentCode VARCHAR(255),        
		PriceUsed FLOAT,        
		BidPrice FLOAT,        
		AskPrice FLOAT,        
		MidPrice FLOAT,        
		LastPrice FLOAT,        
		Feed VARCHAR(20),        
		LastUpdatedTime DATETIME,        
		LastUpdatedBy VARCHAR(50)        
 )        
         

        create  clustered index #ix#Prices on #Prices(InvestmentID, InvestmentCode)
        


	INSERT INTO #PriceSource        
	( 
		InvestmentID, 
		InvestmentCode, 
		SourceID, 
		Par100 
	)        
	SELECT 
		DKG_TIC_INVESTMENT_ID,        
        DKG_TIC_INVESTMENT_CODE,        
        DKG_TIC_SOURCE_ID,  
        DKG_TIC_PAR_100      
	FROM dbo.DKG_TBL_INVESTMENT_CONTROL (NOLOCK)        
	WHERE DKG_TIC_APPROVED = 1     
		-- PCL-207 Changes Starts --
		--AND DKG_TIC_INVESTMENT_CODE NOT IN ('GHSCCO.CB','GHSCDKIL.CB','GHSCDKIP.CB','GHSCDKP.CB','GHSCDKEOF.CB','GHSCDKEOI.CB','GHSIGHSC.CB')
		-- PCL-207 Changes Ends --


        create  clustered index #ix#PriceSource on #PriceSource(InvestmentID)
        create  index #ix#PriceSource2 on #PriceSource(sourceID)
         
	CREATE TABLE #Entitlements        
	(        
		BBGCode VARCHAR(255),        
		IsEntitled BIT         
	)        
         
	INSERT INTO #Entitlements        
	( 
		BBGCode, 
		IsEntitled 
	)        
	SELECT DISTINCT 
		DK_TE_INVESTMENT_CODE, 
		DK_TE_IS_ENTITLED        
	FROM DK_TBL_ENTITLEMENTS (NOLOCK)        
	WHERE DK_TE_UUID = @P_UUID        
        
    -- get live prices first        
    INSERT INTO #Prices        
	( 
		InvestmentID ,        
		InvestmentCode ,        
		PriceUsed ,        
		BidPrice ,        
		AskPrice ,        
		MidPrice ,        
		LastPrice ,        
		Feed ,        
		LastUpdatedTime,        
		LastUpdatedBy        
	)        
    SELECT 
		DKG_TBLP_INVESTMENT_ID,        
        DKG_TBLP_INVESTMENT_CODE,        
		DKG_TBLP_PRICE_USED,          
		DKG_TBLP_BID_PRICE,        
		DKG_TBLP_ASK_PRICE,        
		DKG_TBLP_MID_PRICE,        
		DKG_TBLP_LAST_PRICE,          
		'BBGLIVE',        
		Prc.DKG_TBLP_UPDATED_DATE,        
		prc.DKG_TBLP_CREATED_BY              
    FROM DK_DB_PNL_MONITOR.dbo.DKG_TBL_BBG_LIVE_PRICE Prc (NOLOCK)             
    INNER JOIN #PriceSource ps        
		ON prc.DKG_TBLP_INVESTMENT_ID = ps.InvestmentID        
        AND ps.SourceID IN (101,104)        
    -- mshukla : 09/08/2010 : temporarily commenting out because of old file retrieval issue from bbg ftp  
--    WHERE EXISTS (SELECT 1 FROM #Entitlements e WHERE e.BBGCode = prc.DKG_TBLP_BBG_CODE AND IsEntitled = 1)         
--        AND DKG_TBLP_PRICE_USED IS NOT NULL        


/******************************************************************************************************************
** -- get rest bbg prices from delayed price store
******************************************************************************************************************/
            
    

        /*        
    SELECT 
		dp.DKG_TBDP_INVESTMENT_ID,        
		dp.DKG_TBDP_INVESTMENT_CODE,        
		dp.DKG_TBDP_PRICE_USED,        
		dp.DKG_TBDP_BID_PRICE,        
		dp.DKG_TBDP_ASK_PRICE,        
		dp.DKG_TBDP_MID_PRICE,        
		dp.DKG_TBDP_LAST_PRICE,        
		'BBGDELAYED',        
		dp.DKG_TBDP_CREATED_TIME,        
		dp.DKG_TBDP_CREATED_BY        
    FROM        DKG_TBL_BBG_DELAYED_PRICE dp  (NOLOCK)      
    INNER JOIN #PriceSource ps        
		ON dp.DKG_TBDP_INVESTMENT_ID = ps.InvestmentID        
        AND ps.SourceID IN (101,104)        
        WHERE       dp.DKG_TBDP_INVESTMENT_ID NOT IN (SELECT DISTINCT InvestmentID FROM #Prices)   
        */

        INSERT  INTO #Prices        
                (
                InvestmentID    ,
                InvestmentCode  ,
                PriceUsed       ,
                BidPrice        ,
                AskPrice        ,
                MidPrice        ,
                LastPrice       ,
                Feed            ,
                LastUpdatedTime ,
                LastUpdatedBy
                )
        SELECT  dp.DKG_TBDP_INVESTMENT_ID       ,
                dp.DKG_TBDP_INVESTMENT_CODE     ,
                dp.DKG_TBDP_PRICE_USED          ,
                dp.DKG_TBDP_BID_PRICE           ,
                dp.DKG_TBDP_ASK_PRICE           ,
                dp.DKG_TBDP_MID_PRICE           ,
                dp.DKG_TBDP_LAST_PRICE          ,
                'BBGDELAYED'                    ,
                dp.DKG_TBDP_CREATED_TIME        ,
                dp.DKG_TBDP_CREATED_BY
        FROM    DKG_TBL_BBG_DELAYED_PRICE dp  (NOLOCK)
        where   not exists
                        (
                        select  1
                        from    #Prices p
                        where   p.InvestmentID = dp.DKG_TBDP_INVESTMENT_ID
                        )
                and exists
                        (
                        select  1
                        from    #PriceSource ps        
		        where   dp.DKG_TBDP_INVESTMENT_ID = ps.InvestmentID        
                                and ps.SourceID IN (101,104)
                        )


                
    -- delete the null prices so that they will be picked from the sod prices store        
    DELETE FROM #Prices        
    WHERE PriceUsed IS NULL    
    
    
    
             
  
/******************************************************************************************************************
**-- get other prices        
    -- TODO : change to base it off investment id instead of code 
    
    "NOT IN and DISTINCT WITHIN the SUBQUERY are a bad mix        
******************************************************************************************************************/
        SELECT  *,
                row_number() over(partition by a.dkg_top_investment_id order by a.dkg_last_updated_time desc) as rn
        INTO    #tmp_Other_Prices
        FROM    DK_DB_PNL_MONITOR.dbo.DKG_TBL_OTHER_PRICES A
        WHERE   ISNULL(DKG_TOP_InvestmentCode,'') NOT like '%-FWD%'


        --SELECT  DKG_TOP_INVESTMENT_ID                                           ,
        --        MAX(DKG_LAST_UPDATED_TIME)      as 'DKG_LAST_UPDATED_TIME'
        --into    #tmp_Price_Latest
        --FROM    #tmp_Other_Prices
        --GROUP   BY DKG_TOP_INVESTMENT_ID


 --       INSERT INTO #Prices        
 --               ( 
 --               InvestmentID    ,
 --               InvestmentCode  ,
 --               PriceUsed       ,
 --               BidPrice        ,
 --               AskPrice        ,
 --               MidPrice        ,
 --               LastPrice       ,
 --               Feed            ,
 --               LastUpdatedTime ,
 --               LastUpdatedBy        
 --               )
	--SELECT  distinct
 --               prc.DKG_TOP_INVESTMENT_ID                       ,
 --               prc.DKG_TOP_InvestmentCode                      ,
 --               CASE
 --                       WHEN    DKG_TOP_source <> 'PBD' AND ps.Par100 = 1 THEN (DKG_TOP_PriceUsedLocal-100)
 --                       ELSE    DKG_TOP_PriceUsedLocal
 --               END                                                     as 'PriceUsed',
 --               DKG_TOP_BidPrice                                ,
 --               DKG_TOP_AskPrice                                ,
 --               DKG_TOP_MidPrice                                ,
 --               DKG_TOP_LastPrice                               ,
 --               DKG_TOP_Source                                  ,
 --               prc.DKG_LAST_UPDATED_TIME                       ,
 --               ISNULL(prc.DKG_TOP_LastUpdated,prc.DKG_TOP_CreatedBy)   as 'lastUpdatedBy'
 --       FROM    #tmp_Other_Prices Prc
 --               inner join #PriceSource s ON prc.DKG_TOP_INVESTMENT_ID = s.InvestmentID        
 --                       and prc.DKG_TOP_InvestmentCode is not null        
 --                       and s.SourceID NOT IN (101,104)        
 --               inner join #PriceSource ps on prc.DKG_TOP_INVESTMENT_ID = ps.InvestmentID  
 --       WHERE   prc.rn = 1
 --               and not exists
 --                       (
 --                       select  1
 --                       from    #Prices p
 --                       where   p.InvestmentID = prc.DKG_TOP_INVESTMENT_ID
 --                       )



        ;with   cte_IHateCTE as
        (
        SELECT  distinct
                prc.DKG_TOP_INVESTMENT_ID                       ,
                prc.DKG_TOP_InvestmentCode                      ,
                CASE
                        WHEN    DKG_TOP_source <> 'PBD' AND ps.Par100 = 1 THEN (DKG_TOP_PriceUsedLocal-100)
                        ELSE    DKG_TOP_PriceUsedLocal
                END                                                     as 'PriceUsed',
                DKG_TOP_BidPrice                                ,
                DKG_TOP_AskPrice                                ,
                DKG_TOP_MidPrice                                ,
                DKG_TOP_LastPrice                               ,
                DKG_TOP_Source                                  ,
                prc.DKG_LAST_UPDATED_TIME                       ,
                ISNULL(prc.DKG_TOP_LastUpdated,prc.DKG_TOP_CreatedBy)   as 'lastUpdatedBy'
        FROM    #tmp_Other_Prices Prc
                inner join #PriceSource s ON prc.DKG_TOP_INVESTMENT_ID = s.InvestmentID        
                        and prc.DKG_TOP_InvestmentCode is not null        
                        and s.SourceID NOT IN (101,104)        
                inner join #PriceSource ps on prc.DKG_TOP_INVESTMENT_ID = ps.InvestmentID  
        WHERE   prc.rn = 1
        )
        insert  into #Prices        
                ( 
                InvestmentID    ,
                InvestmentCode  ,
                PriceUsed       ,
                BidPrice        ,
                AskPrice        ,
                MidPrice        ,
                LastPrice       ,
                Feed            ,
                LastUpdatedTime ,
                LastUpdatedBy        
                )
        select  DKG_TOP_INVESTMENT_ID                       ,
                DKG_TOP_InvestmentCode                      ,
                PriceUsed,
                DKG_TOP_BidPrice                                ,
                DKG_TOP_AskPrice                                ,
                DKG_TOP_MidPrice                                ,
                DKG_TOP_LastPrice                               ,
                DKG_TOP_Source                                  ,
                DKG_LAST_UPDATED_TIME                       ,
                lastUpdatedBy
        from    cte_IHateCTE c
        where   not exists
                        (
                        select  1
                        from    #Prices p
                        where   p.InvestmentID = c.DKG_TOP_INVESTMENT_ID
                        )


/*
	SELECT distinct         
		 prc.DKG_TOP_INVESTMENT_ID        
		,prc.DKG_TOP_InvestmentCode        
		,CASE 
			WHEN DKG_TOP_source <> 'PBD' AND ps.Par100 = 1          
				THEN (DKG_TOP_PriceUsedLocal-100)           
				ELSE DKG_TOP_PriceUsedLocal   
		 END        
		,DKG_TOP_BidPrice        
		,DKG_TOP_AskPrice        
		,DKG_TOP_MidPrice        
		,DKG_TOP_LastPrice         
		,DKG_TOP_Source                 
		,prc.DKG_LAST_UPDATED_TIME        
		,ISNULL(DKG_TOP_LastUpdated,DKG_TOP_CreatedBy)        
	FROM #tmp_Other_Prices Prc (NOLOCK)         
    INNER JOIN         
    (        
		SELECT 
			DKG_TOP_INVESTMENT_ID, 
			MAX(DKG_LAST_UPDATED_TIME) DKG_LAST_UPDATED_TIME        
        FROM #tmp_Other_Prices (NOLOCK)     
--            WHERE CONVERT(VARCHAR,DKG_LAST_UPDATED_TIME,101) = CONVERT(VARCHAR,CAST(GETDATE()  AS DATETIME),101)        
        GROUP BY DKG_TOP_INVESTMENT_ID
	) prcLatest        
        ON prc.DKG_TOP_INVESTMENT_ID = prcLatest.DKG_TOP_INVESTMENT_ID        
        AND prc.DKG_LAST_UPDATED_TIME = prcLatest.DKG_LAST_UPDATED_TIME        
	LEFT JOIN #PriceSource s        
        ON prc.DKG_TOP_INVESTMENT_ID = s.InvestmentID        
--            AND CONVERT(VARCHAR,DKG_TOP_CreatedTime,101) = CONVERT(VARCHAR,CAST(GETDATE()  AS DATETIME),101)        
        AND prc.DKG_TOP_InvestmentCode is not null        
--            AND DKG_TOP_CREATEDBY!='PBD''        
        AND s.SourceID NOT IN (101,104)        
--        INNER JOIN DKG_TBL_INVESTMENT_CONTROL (NOLOCK)   
--        ON prc.DKG_TOP_INVESTMENT_ID = DKG_TIC_INVESTMENT_ID            
    INNER JOIN #PriceSource ps  
        ON prc.DKG_TOP_INVESTMENT_ID = ps.InvestmentID  
    WHERE prc.DKG_TOP_INVESTMENT_ID  NOT IN (SELECT DISTINCT InvestmentID FROM #Prices)   
		 -- PCL-207 Changes Starts --
		--AND prc.DKG_TOP_INVESTMENTCODE NOT IN ('GHSCCO.CB','GHSCDKIL.CB','GHSCDKIP.CB','GHSCDKP.CB','GHSCDKEOF.CB','GHSCDKEOI.CB','GHSIGHSC.CB')
		-- PCL-207 Changes Ends --     
*/

/******************************************************************************************************************
**
******************************************************************************************************************/
                    
    SELECT  
		p.InvestmentID ,        
		InvestmentCode ,        
		PriceUsed ,        
		BidPrice ,        
		AskPrice ,        
		LastPrice ,        
		MidPrice ,                    
		Feed ,        
		p.LastUpdatedTime,        
		LastUpdatedBy        
    FROM #Prices p        
	ORDER BY InvestmentCode
        
END  
